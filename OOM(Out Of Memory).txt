什么是OOM？

	OOM（out of memory）即内存泄露。一个程序中，已经不需要使用某个对象，但是因为仍然有引用指向它垃圾回收器就无法回收它，
	
	当该对象占用的内存无法被回收时，就容易造成内存泄露。
	
	
	Android的一个应用程序的内存泄露对别的应用程序影响不大，因为为了能够使得Android应用程序安全且快速的运行，Android的每个
	
	应用程序都会使用一个专有的Dalvik虚拟机实例来运行，也就是说每个应用程序都是在属于自己的进程中运行的。如果程序内存溢出，
	
	Android系统只会kill掉该进程，而不会影响其他进程的使用（如果是system_process等系统进程出问题的话，则会引起系统重启）。
	
	
	
内存泄漏原因：

	1.资源对象没关闭造成的内存泄露，try catch finally中将资源回收放到finally语句可以有效避免OOM。资源性对象比如：
	
		-Cursor
		
		-调用registerReceiver后未调用unregisterReceiver()
		
		-未关闭InputStream/OutputStream
		
		-Bitmap使用后未调用recycle()
		
	2.作用域不一样，导致对象不能被垃圾回收器回收，比如：
	
		-非静态内部类会隐式地持有外部类的引用
		
		-Context泄露
		
		-Thread 引用其他对象也容易出现对象泄露
		
		-onReceive方法里执行了太多的操作
		
	3.内存压力过大
	
		-图片资源加载过多，超过内存使用空间，例如Bitmap的使用
		
		-重复创建view，listview应该使用convertview和viewholder
		
		
如何避免OOM？

	1.使用缓存技术，比如LruCache、DiskLruCache、对象重复并且频繁调用可以考虑对象池
	
	2.对于引用生命周期不一样的对象，可以用软引用或弱引用SoftReferner WeakReferner
	
	3.对于资源对象，使用finally强制关闭
	
	4.内存压力过大就要统一的管理内存
	
	5.Context相关：
	
		①不要保留对Activity的Context长时间的引用（对Activity的引用的时候，必须确保拥有和Activity一样的生命周期）。
		
		②尝试使用Application的Context来替代Activity的Context。
		
		③如果你不想控制内部类的生命周期，应避免在Activity中使用非静态的内部类，而应该使用静态的内部类，
		
		并在其中创建一个对Activity的弱引用WeakReference。