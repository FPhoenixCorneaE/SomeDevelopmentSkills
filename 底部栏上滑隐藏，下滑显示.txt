


	底部栏上滑隐藏，下滑显示功能：
	
	
	主要是应用于首页，类似于taptap，但是情况又与taptap不太一样，因为界面是原生与H5混合的，也就是Hybrid App。
	首页分为几个模块，主要是通过Fragment的显示隐藏实现，在此不详述。
	
	
	一开始是参考了其他人的想法，使用了CoordinatorLayout和Behavior，效果并不是很理想，可能跟显示隐藏动画也有关，
	不过当时没有往这方面想。接着用到了ScrollView和NestedScrollView以及其子类，添加setOnScrollChangeListener监听，
	但是发现然并卵。
	
	
	后来发现setOnTouchListener监听有奇效，但是也并不是所有View滑动效果都很好，只有WebView的滑动效果令人满意；
	令人欣慰的是除了H5页面其他界面都是列表界面，是用RecyclerView实现的列表，RecyclerView的addOnScrollListener
	监听的onScrolled（）方法可以获得比较好的效果。
	
	
	
	具体代码如下：
	
	
	MainActivity中代码：
	
	
	private ViewPropertyAnimator mViewPropertyAnimator;
    private boolean mBottomBarIsShow;
    private boolean isAnimating;
	
	
	@Override
    public void setListeners() {
        mViewPropertyAnimator = llBottomBar.animate();
        mViewPropertyAnimator.setListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animation) {
                isAnimating = true;
            }

            @Override
            public void onAnimationEnd(Animator animation) {
                isAnimating = false;
            }

            @Override
            public void onAnimationCancel(Animator animation) {

            }

            @Override
            public void onAnimationRepeat(Animator animation) {

            }
        });
    }
	
	/**
     * 显示底部导航栏
     */
    public void showBottomBar() {
        if (isAnimating || mBottomBarIsShow) return;
        mViewPropertyAnimator.setDuration(200)
                .setInterpolator(new LinearInterpolator())
                .translationY(0.0f)
                .start();
        mBottomBarIsShow = true;
    }

    /**
     * 隐藏底部导航栏
     */
    public void hideBottomBar() {
        if (isAnimating || !mBottomBarIsShow) return;
        mViewPropertyAnimator.setDuration(200)
                .setInterpolator(new LinearInterpolator())
                .translationY(llBottomBar.getHeight())
                .start();
        mBottomBarIsShow = false;
    }
	
	@Override
    protected void onResume() {
        super.onResume();
        if (!mBottomBarIsShow) {
            showBottomBar();
        }
    }
	
	@Override
    protected void onDestroy() {
        if (mViewPropertyAnimator != null) {
            mViewPropertyAnimator.cancel();
        }
        super.onDestroy();
    }
	
	
	
	
	有RecyclerView的Fragment中代码：
	
	rvMain.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
            }

            @Override
            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                //底部导航栏上滑隐藏，下滑显示
                if (dy > 0) {
                    if (mContext instanceof MainActivity) {
                        ((MainActivity) mContext).hideBottomBar();
                    }
                } else if (dy < -2) {
                    if (mContext instanceof MainActivity) {
                        ((MainActivity) mContext).showBottomBar();
                    }
                }
            }
        });
		
	
	
	
	有WebView的Fragment中代码：
	
	//底部导航栏上滑隐藏，下滑显示
        wvMine.setOnTouchListener(new OnShowOrHideBottomBarListener() {

            @Override
            public void showBottomBar() {
                if (mContext instanceof MainActivity) {
                    ((MainActivity) mContext).showBottomBar();
                }
            }

            @Override
            public void hideBottomBar() {
                if (mContext instanceof MainActivity) {
                    ((MainActivity) mContext).hideBottomBar();
                }
            }
        });
		
		
	OnTouchListener实现抽象类：
	
		
	public abstract class OnShowOrHideBottomBarListener implements OnTouchListener {

    private float startY;
    private float mTouchSlop = 0;

    @Override
    public boolean onTouch(View v, MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                startY = event.getY();
                break;
            case MotionEvent.ACTION_MOVE:
                float y = event.getY();
                if (y - startY > mTouchSlop) {
                    //向下滑动,显示底部导航栏
                    showBottomBar();
                } else if (y - startY < mTouchSlop) {
                    //向上滑动,隐藏底部导航栏
                    hideBottomBar();
                }
                break;
        }
        return false;
    }

    public abstract void showBottomBar();

    public abstract void hideBottomBar();
	}